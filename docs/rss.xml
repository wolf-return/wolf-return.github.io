<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>必坑指南</title><link>https://wolf-return.github.io</link><description>人生就像踩坑，从一个坑调到另一个坑</description><copyright>必坑指南</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://wolf-return.github.io</link></image><lastBuildDate>Sun, 01 Dec 2024 08:04:17 +0000</lastBuildDate><managingEditor>必坑指南</managingEditor><ttl>60</ttl><webMaster>必坑指南</webMaster><item><title>STM32中断</title><link>https://wolf-return.github.io/post/STM32-zhong-duan.html</link><description># STM32中断&#13;
### 设置NVIC&#13;
![1.png](https://s2.loli.net/2024/12/01/JWbogsi1Ol38j4u.png)&#13;
&gt; 如上图所见，我们要设置NVIC的优先级分组，中断通道，中断使能，分配优先级等级&#13;
&gt; 以上大部分参数没啥，值得注意的是优先级分组大都选择NVIC_PriorityGroup_4&#13;
### 初始化管脚&#13;
![2.png](https://s2.loli.net/2024/12/01/NZS5PfIoHCamtFp.png)&#13;
&gt; 这一步骤与正常初始化没啥大区别，只记得一提的是，AFIO时钟，因为是管脚复用，所以需要开启AFIO时钟&#13;
### 初始化中断&#13;
![3.png](https://s2.loli.net/2024/12/01/e1GaOJt7g56LTC9.png)&#13;
&gt; 在这一步骤中我们要设置中断通道，（当然这一参数与设置NVIC的参数不是同一个），中断使能，中断模式，触发中断&#13;
&gt; 值得一提的是我们还要设置中断源，不过GPIO_EXTILineConfig(GPIO_PortSourceGPIOA,GPIO_PinSource0);该函数的参数，&#13;
&gt; 与传统的命名不同需要注意（因为我就在栽过跟头）。</description><guid isPermaLink="true">https://wolf-return.github.io/post/STM32-zhong-duan.html</guid><pubDate>Sun, 01 Dec 2024 08:03:55 +0000</pubDate></item><item><title>STM32踩坑指南二</title><link>https://wolf-return.github.io/post/STM32-cai-keng-zhi-nan-er.html</link><description>## STM32踩坑指南二&#13;
&#13;
&gt; 这个是真的坑。</description><guid isPermaLink="true">https://wolf-return.github.io/post/STM32-cai-keng-zhi-nan-er.html</guid><pubDate>Thu, 21 Nov 2024 14:08:09 +0000</pubDate></item><item><title>STM32踩坑指南-中断</title><link>https://wolf-return.github.io/post/STM32-cai-keng-zhi-nan---zhong-duan.html</link><description>## STM32踩坑指南-中断&#13;
&#13;
## 中断的概念&#13;
&#13;
**中断是指CPU正在处理某个事件A，发生了另一件事件B，请求CPU迅速去处理（中断发生）；CPU暂时停止当前的工作（中断响应），转去处理事件B（中断服务）；待CPU处理事件B完成后，再回到原来的事件A（断点）继续执行，这一过程称之为中断。</description><guid isPermaLink="true">https://wolf-return.github.io/post/STM32-cai-keng-zhi-nan---zhong-duan.html</guid><pubDate>Mon, 18 Nov 2024 09:21:56 +0000</pubDate></item><item><title>STM32踩坑指南一</title><link>https://wolf-return.github.io/post/STM32-cai-keng-zhi-nan-yi.html</link><description># STM32踩坑指南一&#13;
&#13;
STM32开发相关的库有很多，它们都是为了方便开发者使用STM32微控制器而提供的软件工具。</description><guid isPermaLink="true">https://wolf-return.github.io/post/STM32-cai-keng-zhi-nan-yi.html</guid><pubDate>Sat, 16 Nov 2024 15:18:33 +0000</pubDate></item><item><title>坑点</title><link>https://wolf-return.github.io/post/keng-dian.html</link><description># 这是一个keng&#13;
&#13;
## 这是源码及解释&#13;
&#13;
&#13;
```c&#13;
print(”666666666“)&#13;
```&#13;
&gt; 在这里我们要打印666666，目的是为了玩&#13;
## 这是实验现象&#13;
&#13;
![【鬼刃】2024-09-06 16_32_22](https://github.com/user-attachments/assets/aa8db305-6abd-4d08-a42b-bca3b5018178)&#13;
&#13;
&gt; **好看不**&#13;
&#13;
&gt; 在这里我们要打印666666，目的是为了玩&#13;
## 这是实验现象&#13;
&#13;
![【鬼刃】2024-09-06 16_32_22](https://github.com/user-attachments/assets/aa8db305-6abd-4d08-a42b-bca3b5018178)&#13;
&#13;
&gt; **好看不**&#13;
&#13;
**jbiuhguf**&#13;
&#13;
&#13;
。</description><guid isPermaLink="true">https://wolf-return.github.io/post/keng-dian.html</guid><pubDate>Sat, 16 Nov 2024 14:07:47 +0000</pubDate></item></channel></rss>